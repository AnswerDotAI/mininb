# AUTOGENERATED! DO NOT EDIT! File to edit: app.ipynb.

# %% auto 0
__all__ = ['htmxscr', 'mycss', 'TODO_LIST', 'app', 'id_curr', 'id_list', 'TodoItem', 'image', 'static', 'tid', 'mk_input',
           'get_todos', 'add_item', 'find_todo', 'clr_details', 'edit_item', 'update', 'del_todo', 'get_todo']

# %% app.ipynb 2
import uvicorn
from dataclasses import dataclass

from starlette.responses import FileResponse, RedirectResponse, JSONResponse, HTMLResponse
from fastcore.utils import *
from fastcore.xml import *
from fasthtml import *

# %% app.ipynb 6
htmxscr = Script(
    src="https://unpkg.com/htmx.org@1.9.12", crossorigin="anonymous",
    integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2")
mycss = Link(rel="stylesheet", href="picovars.css")

# %% app.ipynb 8
@dataclass
class TodoItem:
    title: str; id: int = -1; done: bool = False

TODO_LIST = [TodoItem(id=0, title="Start writing todo list", done=True),
             TodoItem(id=1, title="???", done=False),
             TodoItem(id=2, title="Profit", done=False)]

# %% app.ipynb 9
app = FastHTML()

reg_re_param("static", "ico|gif|jpg|jpeg|webm|css|js")
@app.get("/{fname:path}.{ext:static}")
async def image(fname:str, ext:str): return FileResponse(f'{fname}.{ext}')
@app.get("/static/{fname:path}")
async def static(fname:str): return FileResponse(f'static/{fname}')

# %% app.ipynb 10
id_curr = 'current-todo'
id_list = 'todo-list'
def tid(id): return f'todo-{id}'

# %% app.ipynb 11
@patch
def __xt__(self:TodoItem):
    show = AX(self.title, f'/todos/{self.id}', id_curr)
    edit = AX('edit',     f'/edit/{self.id}' , id_curr)
    dt = ' (done)' if self.done else ''
    return Li(show, dt, ' | ', edit, id=tid(self.id))

# %% app.ipynb 17
def mk_input(**kw): return Input(name="title", placeholder="New Todo", **kw)

# %% app.ipynb 20
@app.get("/")
async def get_todos(req):
    inp = Group(mk_input(), Button("Add"))
    add = Form(inp, hx_post="/", target_id=id_list, hx_swap="beforeend")
    content = Card(
        Ul(*TODO_LIST, id=id_list),
        header=add, footer=Div(id=id_curr))
    return Html(
        Head(Title('TODO list'), htmxscr, picolink, mycss),
        Body(Main(H1('Todo list'), content, cls='container')))

# %% app.ipynb 21
@app.post("/")
async def add_item(todo:TodoItem):
    todo.id = len(TODO_LIST)+1
    TODO_LIST.append(todo)
    return todo, mk_input(hx_swap_oob='true')

# %% app.ipynb 22
def find_todo(id):
    try: return next(o for o in TODO_LIST if o.id==id)
    except: raise NotFoundException(f'Todo #{id}') from None

# %% app.ipynb 23
def clr_details(): return Div(hx_swap_oob='innerHTML', id=id_curr)

# %% app.ipynb 24
@app.get("/edit/{id}")
async def edit_item(id:int):
    form = Form(Group(Input(id="title"), Button("Save")),
                Hidden(id="id"), Checkbox(id="done", label='Done'),
                hx_put="/", target_id=tid(id), id="edit")
    return fill_form(form, find_todo(id))

# %% app.ipynb 25
@app.put("/")
async def update(todo: TodoItem):
    fill_dataclass(todo, find_todo(todo.id))
    return todo, clr_details()

# %% app.ipynb 26
@app.delete("/todos/{id}")
async def del_todo(id:int):
    TODO_LIST.remove(find_todo(id))
    return clr_details()

# %% app.ipynb 27
@app.get("/todos/{id}")
async def get_todo(id:int):
    todo = find_todo(id)
    btn = Button('delete', hx_delete=f'/todos/{todo.id}',
                 target_id=tid(todo.id), hx_swap="outerHTML")
    return Div(Div(todo.title), btn)
